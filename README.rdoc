= Dubsar

Dubsar is a dictionary web application using Ruby on Rails 3.0.  The
content is taken from the Princeton University
WordNet[http://wordnet.princeton.edu/] project.

== Functionality, Features and Content

The functionality is limited by availability of content (or at least by
my understanding of the available content).  For example, WordNet only
includes adjectives, adverbs, nouns and verbs (the other parts of
speech being represented by relatively few words and being often
considered less important or directly relevant to certain sorts of
content).

Currently, a user can:
Browse entries by first letter:: Via links in the navigation bar, you
                                 can retrieve a list of all words
                                 beginning with that letter.
Search for a word:: Type a word into the text box and press return or
                    click the _search_ button.  There is also a toggle
                    button (like a check box) to <i>match case</i>.
                    SQL wild cards may be used at any position, e.g.
                    <i>%one%</i> will search for all words containing
                    _one_, and <i>c_t</i> matches both _cat_ and _cot_.
View a word's definitions and part of speech::
                            In the active accordion pane for each
                            word, all available definitions are
                            displayed.  An abbreviation for the part of
                            speech is displayed in the accordion header
                            (<i>adj., adv., n.</i> or <i>v.</i>).  If a
                            word may be used as multiple parts of
                            speech (e.g., _run_ as both a noun and a
                            verb), two entries will be made.  Each
                            Dubsar dictionary entry has a single part
                            of speech.
View a word's synonyms:: All available synonyms for a word are listed
                         with its definitions.
See suggestions for search terms in an autocompleter::
                         The autocompleter shows available matches
                         while a user is typing.  It honors the
                         <i>match case</i> selection, only suggesting
                         case-sensitive matches when the button is
                         selected.
Choose between two canned jQuery themes using a pair of radio buttons::
                         The application uses a cookie to store the
                         selected theme.
See flash-based error messages::
                         The application redirects to the previous page
                         (if internal) or the index with a reasonable
                         error message in case of exception.
Scroll through search results without losing the page header or footer::
                         A framelike fixed-position display allows a
                         user to scroll the results.
See a "searching..." message when a search request is submitted::
                         A message is temporarily displayed below the
                         header bar while waiting for the next page to
                         load.
Read news about the site in the index view::
                         A "News <i>(n.)</i>" accordion pane has been
                         added.
See the time of the last news update::
                         The timestamp is automatically taken from the
                         <i>_news.html.haml</i> file's modification
                         time.
Take a tour of the application:: Dubsar now has a /tour path,
                                 accessible from the index view.
See a list of QUnit tests in a browser::
                         Visit http://dubsar-dictionary.com/qunit
Get better visual notification when a search is in progress::
                         A "working..." message is displayed any time
                         a search request is made to the server for a
                         new page.  Whenever the AJAX autocompleter is
                         active, the mouse cursor for the search box
                         and autocompleter menu is changed to a wait
                         cursor for the duration of the request.
See a reasonable number of responses in the autocompleter::
                         Since the header bar already provides a means
                         of browsing all words starting with a given
                         letter, and the number of autocomplete
                         responses for a single letter is enormous, the
                         autocompleter now only fires when two or more
                         letters have been typed in.
Include extra white space in a request::
                         The application strips all leading and
                         trailing white space in a request and
                         compresses multiple internal white space
                         characters to a single space.

== Viewing

Dubsar is deployed at http://dubsar-dictionary.com.  You can also
build your own local copy from source by following the directions
below.

== Building and Running

=== Prerequisites

The following instructions are for a vanilla Ubuntu 10.04 installation
except where otherwise noted.

==== System packages

  sudo apt-get install gcc libreadline6-dev libzlib-ruby zlib1g-dev

==== PostgreSQL

<b>Ubuntu:</b>

  sudo apt-get install postgresql-8.4 libpq-dev

<b>OS X:</b> (MacPorts)

You cannot build the +pg+ gem againt a precompiled PostgreSQL
installation.  MacPorts builds it locally from source and installs it
for you:

  sudo port install postgresql84
  sudo port install postgresql84-server

Follow the instructions at the end to initialize a default database.

<b>All:</b>

Once PostgreSQL is installed and running:

  sudo -u postgres createuser $LOGNAME

Make the new user (yourself) a superuser.  Edit the user name and
password (if any) in <tt>config/database.yml</tt> to agree with the
PostgreSQL user you just created.

==== RVM

RVM is strongly recommended.  The briefest RVM installation is:

  bash < <( curl http://rvm.beginrescueend.com/releases/rvm-install-head )

Then edit your <tt>~/.bashrc</tt> file in accordance with the
{RVM Post Install instructions}[http://rvm.beginrescueend.com/rvm/install/].
In a typical Ubuntu installation, you change:

  [ -z "$PS1" ] && return

to

  if [[ -n "$PS1" ]]; then

and add

  fi
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"  # This loads RVM into a shell session.

at the end of the <tt>~/.bashrc</tt> file.  Exit your shell and start
a new one.

==== Install desired rubies

Dubsar has been tested with MRI 1.9.2 and REE 1.8.7.  Both are easily
installed using RVM:

  rvm install ree-1.8.7
  rvm install 1.9.2

But see the following section for notes on installing MRI.

==== Install RVM packages and MRI 1.9.2

Usually in an Ubuntu installation, MRI requires the following steps:

  rvm package install openssl
  rvm package install readline
  rvm install 1.9.2 --with-readline-dir=~/.rvm/usr --with-openssl-dir=~/.rvm/usr

==== Set up RVM

Choose a ruby to use (for the remainder of this shell or until changed
manually):

  rvm use ree

Choose a default (and use it now):

  rvm --default 1.9.2

==== Bundler

Install the bundler gem.

  gem install bundler

=== Dubsar

Install gems with the bundler.

  bundle install

Set up the database.

  rake db:create
  rake db:schema:load

Seed the database.

  rake db:seed
  (in /home/jdee/github/jdee/dubsar)
  2010-10-17 06:15:45 -0500 loading adjectives
  2010-10-17 06:29:47 -0500 loaded 21601 adjectives (18156 synsets)
  2010-10-17 06:29:47 -0500 loading adverbs
  2010-10-17 06:32:43 -0500 loaded 4477 adverbs (3621 synsets)
  2010-10-17 06:32:43 -0500 loading nouns
  2010-10-17 07:55:18 -0500 loaded 118532 nouns (82115 synsets)
  2010-10-17 07:55:18 -0500 loading verbs
  2010-10-17 08:09:15 -0500 loaded 11308 verbs (13767 synsets)

<b>Note:</b> Seeding the DB takes an hour or two on a decent 64-bit
processor.  While you're waiting, you can run the unit tests and
generate local documentation.

Run unit tests.

  rake test

Generate local HTML documentation in <tt>doc/app/index.html</tt>:

  rake doc:app

Once the database has been seeded, run the server.

  rails server

Connect a browser to port 3000.

== Supported Browsers

Currently, Dubsar works with every browser it's been tested with,
though there are small style glitches from one to the next.  The QUnit
test suite currently passes on all browsers.
- Firefox 3 on all platforms (Ubuntu, Vista, OS X)
- Google Chrome 6 on all platforms
- Safari 5 on OS X and Vista
- Camino 2 on OS X
- OmniWeb 5 on OS X
- Internet Explorer 8 on Vista
- Opera 10 on all platforms
- Konqueror 4 on Ubuntu Linux

The server has been tested both on Ubuntu and OS X.

== Known Issues

- Pressing _enter_ after typing a word into the search box does not
  usually trigger a search as long as the autocomplete list is showing,
  even if the text field has focus.  It is possible to trigger a search
  by selecting an item from the autocomplete list.  The _enter_ key
  works if you first press _escape_ to remove the autocomplete list.
  You can also transfer focus to the _search_ button using the _tab_
  key.
- When a search is submitted (via the _search_ button or a link letter
  at the top), an message is displayed below the header bar reading,
  "searching...."  An _info_ icon is displayed, but it does not usually
  show up.  It consistently shows up in Camino 2 on OS X, but most
  other browsers display it intermittently.  If you go into the
  JavaScript console in Chrome or into Firebug and examine the error
  div and its child <tt>ui-icon</tt> span, it will have the correct
  background image, background offset, etc.  After examining those
  things, the icon will begin showing up correctly in all requests
  during that browser session.  This seems like it might be a jquery-ui
  bug.
- When a user is viewing a list of results in an accordion, if they
  submit an invalid search term through the search form (e.g., "foo"),
  they will be redirected back to the page they were viewing, with an
  error that will fade shortly after the page loads.  The accordion on
  that page will be open to the pane they were previously viewing (the
  information is stored in a cookie).  This does not work when you
  click the back button after following a link (in the header bar,
  pagination footer or in a definition pane).  The first pane in the
  accordion will be open after clicking back in this case.

== Future Plans

=== Functionality and implementation

An advanced search option would be nice.  Users who are familiar with
SQL can choose quite a few search options by typing wildcards into the
search form.  It's a good idea to have an advanced-search page where a
user can choose a number of options (like <i>starts-with, ends-with,
exact-match, contains</i>) that are available using SQL wild cards.  An
advanced search can also allow users to specify a part of speech or
perhaps search the contents of word definitions (as well as any other
fields later added to the data model).  This can be displayed as a
separate page or perhaps as a sidebar that can be hidden.

I want to review Rails web servers (options with Rack), though it may
make little difference when deploying with Passenger.

It might be interesting to write a Dubsar plug-in for looking up
definitions and synonyms of key words in the text of any web page.  The
WordNet data set is well suited to that task.  This could take the form
of:
- A Rails plug-in for looking up words and providing things like
  synonym spans for template rendering or general-purpose access to the
  data model.
- A plug-in for applications and controls that perform spellchecking or
  similar text-handling functions.
See below regarding better lexical identification of words from
context to narrow synonym lists.

=== Content

It's clear from a closer look at the WordNet materials that the sample
sentences contained within glosses are itended to be parsed separately.
In particular, there is a simple online
{WordNet application}[http://wordnetweb.princeton.edu/perl/webwn] that
does a number of things with the data.  The WordNet data set includes
additional information about semantic and lexical relationships among
synsets that would be nice to bring into the application as well.

Beyond that, I'd like to add more content to the application by further
exploring the data set or finding others.  This kind of application is
only as good as its data.  Here's a wish list of things to add:
- Etymology
- Pronunciation
- Remaining parts of speech (conjunctions, interjections, prepositions,
  pronouns)
- Illustrations (somewhat rare in online dictionaries)
- Inflected word match (match other noun and verb forms, including
  irregulars)
- Inexact searching (soundex, metaphone, etc.)
- Better lexical word identification: If Dubsar can better recognize a
  word's part of speech from its context (e.g., inflection, position
  relative to other words, etc.), its synonym list can be narrowed.

== Copyright

Copyright (C) 2010 Jimmy Dee except as otherwise attributed.

WordNet(R) Copyright (C) 2010 The Trustees of Princeton University.

== License

Dubsar is free, open-source software, distributed under Version 2 of
the GNU General Public License (GPL):

  Dubsar Dictionary Project
  Copyright (C) 2010 Jimmy Dee

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

WordNet(R) is available under the {WordNet 3.0 License}[http://wordnet.princeton.edu/wordnet/license/].
