= Dubsar

Dubsar is a dictionary web application using Ruby on Rails 3.0.  The
content is taken from the Princeton University
WordNet[http://wordnet.princeton.edu/] project.

== Functionality, Features and Content

The functionality is limited by availability of content (or at least by
my understanding of the available content).  For example, WordNet only
includes adjectives, adverbs, nouns and verbs (the other parts of
speech being represented by relatively few words and being often
considered less important or directly relevant to certain sorts of
content).

Currently, a user can:
Browse entries by first letter:: Via links in the navigation bar, you
                                 can retrieve a list of all words
                                 beginning with that letter.
Search for a word:: Type a word into the text box and press return or
                    click the _search_ button.  There is also a toggle
                    button (like a check box) to <i>match case</i>.
                    SQL wild cards may be used at any position, e.g.
                    <i>%one%</i> will search for all words containing
                    _one_.
View a word's definitions and part of speech::
                            In the active accordion pane for each
                            word, all available definitions are
                            displayed.  An abbreviation for the part of
                            speech is displayed in the accordion header
                            (<i>adj., adv., n.</i> or <i>v.</i>).  If a
                            word may be used as multiple parts of
                            speech (e.g., _run_ as both a noun and a
                            verb), two entries will be made.  Each
                            Dubsar dictionary entry has a single part
                            of speech.
View a word's synonyms:: All available synonyms for a word are listed
                         after its definitions.  Also, for many words,
                         it is possible to hover over them where they
                         appear in word definitions and see a list of
                         synonyms.  This only happens in the defintion
                         accordion pane.
See suggestions for search terms in an autocompleter::
                         The autocompleter shows available matches
                         while a user is typing.  It honors the
                         <i>match case</i> selection, only suggesting
                         case-sensitive matches when the button is
                         selected.
Choose between two canned jQuery themes using a pair of radio buttons::
                         The application uses a cookie to store the
                         selected theme.
See flash-based error messages::
                         The application redirects to the previous page
                         (if internal) or the index with a reasonable
                         error message in case of exception.

== Building and Running

=== Ruby and Rails

Dubsar uses Rails 3.0 with MRI 1.9.2 (and Rubygems 1.3.7).

=== PostgreSQL

In order to run Dubsar you must install and configure PostgreSQL.  I am
currently working with 8.4.  The setup is fairly generic.  Stay tuned
for further instructions.  Once the DB is up and running, change the
user name and password in <tt>config/database.yml</tt>.

=== Dubsar

Install the bundler gem.

  gem install bundler

Install gems with the bundler.

  bundle install

Set up the database.

  rake db:create
  rake db:schema:load

Run unit tests.

  rake test

Generate local HTML documentation in <tt>doc/app/index.html</tt>:

  rake doc:app

Seed the database.

  rake db:seed

*Note:* Seeding the DB takes about twenty minutes on my dual-core
64-bit Pentium desktop.

Run the server.

  rails server

Connect a browser to port 3000.

== Supported Browsers

Currently, Dubsar works well with:
- Firefox 3 on all platforms (Ubuntu, Vista, OS X)
- Google Chrome 6 on all platforms
- Safari 5 on OS X and Vista
- Camino 2 on OS X
- OmniWeb 5 on OS X

Dubsar does not work with:
- Internet Explorer 8
- Opera 10
- Konqueror 4

== Known Issues

- There are some small glitches with the autocompleter and the
  word-entry text field.  Usually it will submit a search if that
  element has focus, and the user presses return.  Something related to
  AJAX and JavaScript event handling is not entirely right, and this
  does not always work properly.  If the user presses return before the
  first AJAX request, the form works normally.  Once the autocompleter
  pops up, the return key will no longer trigger a search.
- Even after the word-entry field is cleared, an AJAX response often
  trickles in and pops up the autocompleter again.

== Future Plans

=== UI and views

A frame-based view would be ideal, to allow the result set to scroll
while the header (and possibly the pagination footer) remain
stationary.

=== Functionality and implementation

It might be interesting to write a Dubsar plug-in for looking up
definitions and synonyms of key words in the text of any web page.  The
WordNet data set is well suited to that task.

I want to review the use of the <tt>will_paginate</tt> gem to pace the
AJAX requests and responses for the autocompleter.  It makes for good
code re-use, but thirty words per batch may be too few for the
autocompleter.  A web page containing thirty words with definitions,
synonyms and markup is a large payload, but the JSON response is very
small, and rather than being an optimization, the small chunk size may
end up adding too much overhead.

=== Content

It's clear from a closer look at the WordNet materials that the sample
sentences contained within glosses (<tt>:definitions</tt>) are intended
to be displayed separately.  In particular, there is a simple online
{WordNet application}[http://wordnetweb.princeton.edu/perl/webwn] that
does a number of things with the data.  Quite a few of the features
there are related to WordNet's home-grown index, which is not used or
very relevant to this project.

Beyond that, I'd like to add more content to the application by further
exploring the data set or finding others.  This kind of application is
only as good as its data.  Here's a wish list of things to add:
- Etymology
- Pronunciation
- Remaining parts of speech (conjunctions, interjections, prepositions,
  pronouns)
- Illustrations (somewhat rare in online dictionaries)
