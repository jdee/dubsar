= Dubsar

Dubsar is a dictionary web application using Ruby on Rails 3.0.  The
content is taken from the Princeton University
WordNet[http://wordnet.princeton.edu/] project.

== Functionality, Features and Content

The functionality is limited by availability of content (or at least by
my understanding of the available content).  For example, WordNet only
includes adjectives, adverbs, nouns and verbs (the other parts of
speech being represented by relatively few words and being often
considered less important or directly relevant to certain sorts of
content).

Currently, a user can:
Browse entries by first letter:: Via links in the navigation bar, you
                                 can retrieve a list of all words
                                 beginning with that letter.
Search for a word:: Type a word into the text box and press return or
                    click the _search_ button.  There is also a toggle
                    button (like a check box) to search for words that
                    <i>start with</i> the search term.  When the button
                    is not selected (by default), Dubsar returns only
                    exact matches.
View a word's definitions and part of speech::
                            In the active accordion pane for each
                            word, all available definitions are
                            displayed.  An abbreviation for the part of
                            speech is displayed in the accordion header
                            (<i>adj., adv., n.</i> or <i>v.</i>).  If a
                            word may be used as multiple parts of
                            speech (e.g., _run_ as both a noun and a
                            verb), two entries will be made.  Each
                            Dubsar dictionary entry has a single part
                            of speech.
View a word's synonyms:: All available synonyms for a word are listed
                         after its definitions.  Also, for many words,
                         it is possible to hover over them where they
                         appear in word definitions and see a list of
                         synonyms.  This only happens in the defintion
                         accordion pane.
See suggestions for search terms in an autocompleter::
                         The autocompleter shows available matches
                         while a user is typing.
Choose between two canned jQuery themes using a pair of radio buttons::
                         The application uses a cookie to store the
                         selected theme.
See flash-based error messages::
                         The application redirects to the previous page
                         (if internal) or the index with a reasonable
                         error message in case of exception.

== Building and Running

=== Ruby and Rails

Dubsar uses Rails 3.0 with MRI 1.9.2 (and Rubygems 1.3.7).

=== PostgreSQL

In order to run Dubsar you must install and configure PostgreSQL.  I am
currently working with 8.4.  The setup is fairly generic.  Stay tuned
for further instructions.  Once the DB is up and running, change the
user name and password in <tt>config/database.yml</tt>.

=== Dubsar

Install the bundler gem.

  gem install bundler

Install gems with the bundler.

  bundle install

Set up the database.

  rake db:create
  rake db:schema:load

Run unit tests.

  rake test

Seed the database.

  rake db:seed

This takes about twenty minutes on my dual-core 64-bit Pentium
desktop.

Run the server.

  rails server

Connect a browser to port 3000.

== Supported Browsers

Currently, Dubsar works well with:
- Firefox 3 on all platforms (Ubuntu, Vista, OS X)
- Google Chrome 6 on all platforms
- Safari 5 on OS X and Vista
- Camino 2 on OS X
- OmniWeb 5 on OS X

Dubsar does not work with:
- Internet Explorer 8
- Opera 10
- Konqueror 4

== Known Issues

- There are some small glitches with the autocompleter and the
  word-entry text field.  Usually it will submit a search if that
  element has focus, and the user presses return.  It will also
  submit a search if the user selects an item from the autocomplete
  menu.  Something related to AJAX and JavaScript event handling is
  not entirely right, and these things do not always work
  consistently.
- Even after the word-entry field is cleared, sometimes an AJAX
  response trickles in and pops up the autocompleter again.
- When the Dubsar index page is first loaded by visiting the URL, the
  initial open accordion pane is a little too small for its content.
  It gains a scrollbar on the right, and the second line of text is not
  entirely visible.  This is corrected by clicking on the _h1_ element
  in the upper left-hand corner (''Dubsar Dictionary'').  In both cases,
  jQuery seems to add a <i>style='height: value;'</i> attribute to
  the _div_ for this pane, but the supplied <i>value</i> is different
  in each case.  It's not clear why.

== Future Plans

It's a simple enough matter to extend the <i>starts with</i> search
functionality.  I intend to change the toggle button to a set of four
radio buttons, also including <i>exact match</i>, <i>ends with</i> and
_contains_.  The <i>starts with</i> request was already implemented
for purposes of the autocompleter and the navigation bar.  It worked
with a manually well-formed URL.  So it was a simple matter to add the
single search option first.  The others will follow.

By default, all searches are case-sensitive.  Case-insensitive
searching is an easy option to add as well.

It might be interesting to write a Dubsar plug-in for looking up
definitions and synonyms of key words in the text of any web page.  The
WordNet data set is well suited to that task.

I want to review the use of the <tt>will_paginate</tt> gem to pace the
AJAX requests and responses for the autocompleter.  It makes for good
code re-use, but thirty words per batch may be too few for the
autocompleter.  A web page containing thirty words with definitions,
synonyms and markup is a large payload, but the JSON response is very
small, and rather than being an optimization, the small chunk size may
end up adding too much overhead.

It's clear from a closer look at the WordNet materials that the sample
sentences contained within glosses (<tt>:definitions</tt>) are intended
to be displayed separately.  In particular, there is a simple online
{WordNet application}[http://wordnetweb.princeton.edu/perl/webwn] that
does a number of things with the data.  Quite a few of the features
there are related to WordNet's home-grown index, which is not used or
very relevant to this project.

Beyond that, I'd like to add more content to the application by further
exploring the data set or finding others.  This kind of application is
only as good as its data.  Here's a wish list of things to add:
- Etymology
- Pronunciation
- Remaining parts of speech (conjunctions, interjections, prepositions,
  pronouns)
- Illustrations (somewhat rare in online dictionaries)
